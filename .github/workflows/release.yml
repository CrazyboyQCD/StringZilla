name: Release

on:
  push:
    branches: ["main"]

env:
  BUILD_TYPE: Release
  GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
  PYTHONUTF8: 1

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:

  # How hard can it be?!
  # Let's just upgrade versions manually with `.github/workflows/update_version.sh`.
  # versioning:
  #   name: Semantic Release
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout
  #       with:
  #         persist-credentials: false
  #     - name: Set up Node.js
  #       uses: actions/setup-node
  #       with:
  #         node-version: 20
  #     - run: npm install --ignore-scripts --save-dev --prefix ./package-ci @semantic-release/exec @semantic-release/git conventional-changelog-eslint semantic-release && npx --prefix ./package-ci semantic-release

  rebase:
    name: Rebase Dev. Branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the latest code
        uses: actions/checkout
        with:
          fetch-depth: 0

      - name: Perform rebase
        run: |
          git fetch origin main
          git checkout main-dev
          git rebase origin/main
          
      - name: Push changes
        uses: CasperWA/push-protected
        with:
          token: ${{ secrets.SEMANTIC_REBASE_TOKEN }}
          branch: main-dev
          unprotect_reviews: True
          force: True

  build_wheels:
    name: Build Python
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macOS-11, windows-2022]

    steps:
      - uses: actions/checkout
        with:
          ref: 'main'      
      - uses: actions/setup-python
      
      - name: Setup Docker
        if: matrix.os != 'windows-2022'
        uses: crazy-max/ghaction-setup-docker
        with:
          version: 23.0.1

      - name: Setup QEMU
        if: matrix.os != 'windows-2022'
        uses: docker/setup-qemu-action

      - name: Install CIBuildWheel
        run: python -m pip install --no-cache-dir cibuildwheel

      - name: Build wheels
        run: python -m cibuildwheel

      - uses: actions/upload-artifact
        with:
          path: ./wheelhouse/*.whl
  
  
  publish_python:
    name: Publish Python
    needs: build_wheels
    runs-on: ubuntu-20.04
    environment:
      name: pypi
      url: https://pypi.org/p/stringzilla
    permissions:
      id-token: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact
        with:
          path: ./dist/

      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ./dist/artifact
          verbose: true
          print-hash: true

  publish_rust:
    name: Publish Rust
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout
        with:
          ref: "main"
      - run: git submodule update --init --recursive
      - uses: actions-rs/toolchain
        with:
          toolchain: stable
          override: true
      - uses: katyo/publish-crates
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Let's not publish the JavaScript package for now
  # publish_javascript:
  #   name: Publish JavaScript
  #   needs: versioning
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout
  #       with:
  #         ref: 'main'  
  #     - run: git submodule update --init --recursive
  #     - uses: actions/setup-node
  #       with:
  #         node-version: 18
  #     - run: npm install
  #     - run: npm ci
  #     - run: npm test
  #     - uses: JS-DevTools/npm-publish
  #       with:
  #         token: ${{ secrets.NPM_TOKEN }}
