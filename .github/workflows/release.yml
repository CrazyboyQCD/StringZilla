name: "Release"

on:
  push:
    branches: ["main"]

env:
  BUILD_TYPE: Release
  GH_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
  PYTHONUTF8: 1

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  versioning:
    name: Semantic Release
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm install --ignore-scripts --save-dev --prefix ./package-ci @semantic-release/exec @semantic-release/git conventional-changelog-eslint semantic-release && npx --prefix ./package-ci semantic-release

  rebase:
    name: Rebase Dev. Branch
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: versioning
    steps:
      - name: Checkout the latest code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Perform rebase
        run: |
          git fetch origin main
          git checkout main-dev
          git rebase origin/main

      - name: Push changes
        uses: CasperWA/push-protected@v2
        with:
          token: ${{ secrets.SEMANTIC_REBASE_TOKEN }}
          branch: main-dev
          unprotect_reviews: True
          force: True

  build_wheels:
    name: Build Python ${{ matrix.python-version }} for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: versioning
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["36", "37", "38", "39", "310", "311", "312"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Setup QEMU
        if: matrix.os == 'ubuntu-latest' # We only need QEMU for Linux builds
        uses: docker/setup-qemu-action@v3
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel
      - name: Build wheels
        run: cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: cp${{ matrix.python-version }}-*
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
          overwrite: true

  publish_python:
    name: Publish Python
    needs: build_wheels
    runs-on: ubuntu-20.04
    environment:
      name: pypi
      url: https://pypi.org/p/stringzilla
    permissions:
      id-token: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          verbose: true
          print-hash: true

  publish_rust:
    name: Publish Rust
    runs-on: ubuntu-22.04
    needs: versioning
    steps:
      - uses: actions/checkout@v4
        with:
          ref: "main"
      - run: git submodule update --init --recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Let's not publish the JavaScript package for now
  # publish_javascript:
  #   name: Publish JavaScript
  #   needs: versioning
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: 'main'
  #     - run: git submodule update --init --recursive
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #     - run: npm install
  #     - run: npm ci
  #     - run: npm test
  #     - uses: JS-DevTools/npm-publish@v2
  #       with:
  #         token: ${{ secrets.NPM_TOKEN }}
