# This file configures wheels compilation for `cibuilwheel` for StringZilla CPython bindings.
# On a good day it will produce:
#   - `manylinux` and `musllinux` wheels for Linux on x86_64, aarch64, i686, ppc64le, s390x;
#   - `macos` wheels for x86_64, arm64, and universal2;
#   - `windows` wheels for AMD64, x86, and ARM64.
#   * for Python versions from 3.6 to 3.12.
#   * running over 5,000 tests on each wheel.
#   = meaning 16 platforms  * 7 Python versions = 112 builds.
#   = meaning over 500,000 tests.
[build-system]
requires = ["setuptools>=42", "wheel", "cmake>=3.22", "numpy"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]

[tool.cibuildwheel]
test-requires = ["pytest", "pytest-repeat", "numpy"]
test-command = "pytest {project}/scripts/test.py -x"
build-verbosity = 0

# We need to build for all platforms:
# - on Linux: x86_64, aarch64, i686, ppc64le, s390x
# - on MacOS: x86_64, arm64, universal2
# - on Windows: AMD64, x86, ARM64
# https://cibuildwheel.readthedocs.io/en/stable/options/#archs
#
# Important to note, not all those paltforms have recent images.
# The `manylinux_2_28` seems to be missing for `s390x`, `i686`, and `ppc64le`.
# The `i686` is 32-bit x86, and `x86_64` is 64-bit x86.
archs = ["all"]

# Skip PyPy builds... we are implementing a CPython binding after all :)
skip = ["pp*"]

[tool.cibuildwheel.linux]
before-build = ["rm -rf {project}/build"]
repair-wheel-command = "auditwheel repair --lib-sdir . -w {dest_dir} {wheel}"

# Use more recent images for the most popular SIMD-capable CPU architectures, to have access to newer compilers.
# Otherwise, prepare yourself to all kinds of AVX-512 issues and other SIMD-related pain.
# You can keep track of the most recent images on Quay:
# - for `manylinux`: https://quay.io/search?q=manylinux
# - for `musllinux`: https://quay.io/search?q=musllinux
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
musllinux-x86_64-image = "musllinux_1_2"
musllinux-aarch64-image = "musllinux_1_2"

# On CentOS we have to use `yum`.
# The healthy version would be: `apt-get update && apt-get install -y libc6-dev wget python3-dev`.
before-all = ["yum update -y && yum install -y glibc-devel wget python3-devel"]

# With `musl` builds, we obviously don't need the `glibc` and can't use `yum`.
# This may also be handy for using custom dependencies for different Python versions:
# https://cibuildwheel.readthedocs.io/en/stable/options/#overrides
[[tool.cibuildwheel.overrides]]
select = "*-musllinux*"
before-all = "apk add --update wget python3-dev"

[tool.cibuildwheel.macos]
before-build = ["rm -rf {project}/build"]
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"

[tool.cibuildwheel.windows]
before-build = ["rd /s /q {project}\\build || echo Done"]
